	python基础 
		--基础:
			1, 第一句python
				- 用cmd 调用--python (路径)+(文件名)) 扩展名是任意的
				- 导入模块是,如果不是.py文件,可能导入不成功
				- python --> 扩展名必须是.py 
				
				
			2, 2种执行方式
				python解释器 python (路径)+(文件名)
				cmd输入python 进去解释器,实时输入并获取结果
				
				
			!!!编码 
				ASCII 8位
				Unicode 16位+
				UTF-8 :能用多少表示就用多少表示 ==>python3无需关注,python2必须加
				
	linux 执行python
	文件名 1.py
	执行 ./1.py

	linux中python代码格式

	#!/usr/bin/env/python # python在linux中的路径
	# -*- coding:utf-8 -*- # 可以执行 python2中使用utf-8 print 才可以包含中文(Windows中) 

	print(1)


			3, 执行一个操作.
				提醒用户输入:用户名和密码.
				获取用户名和密码,检测:用户名=root 密码:=root 
				正确:登录成功
				错误:登录失败
				
				
			4, 变量: 
				由字母,数字,下划线 组成
				
				变量数字不能开头
				关键字不能开头
				['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']
				最好不要和python内置的东西重复.
				
				变量名称有意义
				
			5, 条件语句
				(1)if 基本语句
					if 条件 :
						内部代码块
					else:
						....
					print()
				(2)if 嵌套
				(3)if elif 语句
				(4)if 1==1:
					pass # if不执行,pass表示过
				else:
					print("...")
				
				
			6,基本数值类型
				字符串 :引号引起来的为字符串,引号内的称为字符
					name = ' '
					name = " "
					name = """ """
					name = ''' '''
					
					字符串加法:
						n1 = '1'
						n2 = '2'
						n3 = '3'
						n4 = n1 + n2 + n3 
					
					字符串的乘法:
						n1 = '1'
						n2 = n1 * 10   # n1输出10次
					
				数字:
					age = 13
					
					数字运算:
						num = 10
						num2 = 20 
						
						num3 = num + num2 	加法
						num3 = num - num2 	减法
						num3 = num * num2 	乘法
						num3 = num / num2 	除法
						num3 = 2 ** 4 	幂运算
						num3 = 39 % 8 	获取38除以8的余数 num3 = 7 
						num3 = 39 // 8 	获取38除以8的商 	num3 =4
						
						#判读奇偶数
						a = 13 
						temp = a % 2 
						if temp == 0:
							print('偶数')
						else:
							print('奇数')
							
			7,循环 
				死循环
					whine 1==1:
						print('ok')
						
					while循环.
						while  else 
						continue  # continue 以下操作不执行,回到 循环 开始
						break   # break 终止所有循环
						
			8,##运算符

                算数运算符: ---> 赋值运算符 >>>返回结果为值

                + # 加
                - # 减
                * # 乘
                / # 除以

                ** # 幂运算
                % # 取余数
                // # 取商

                ####################

                赋值运算符: ---> 算数运算符 >>>返回结果为值
                a = a + b == a += b 
                a = a - b == a -= b 
                a = a * b == a *= b 
                a = a / b == a /= b 
                a = a ** b == a **= b
                a = a % b == a %= b 
                a = a // b == a //= b

                ####################

                比较运算符: >>> 返回结果为布尔值
                == # 等于
                > # 大于
                < # 小于
                >= # 大于等于
                <= # 小于等于
                != # 不等于
                <> # 不等于

                ####################

                逻辑运算符: >>> 返回结果为布尔值

                not # 非,
                    not False == True
                    not True == False 

                and # 和, 有括号先执行括号内的,没有括号,从左到右依次执行
                逻辑字符拼接
                    user = 'root'
                    passwd = 'root'
                    if user == 'root' and passwd == 'root' : # 俩个或多个条件都满足
                        print('输入正确')
                     else:
                        print('输入错误')
                    print('end')

                or # 或, 有括号先执行括号内的,没有括号,从左到右依次执行
                    user = 'root'
                    passwd = 'root'
                    if user == 'root' or user == 'user' and passwd == 'root' or passwd == 'passwd': # 俩个或多个条件仅需满足一个即可
                        print('输入正确')
                     else:
                        print('输入错误')
                    print('end')
                    
                ## and 和 or 在同一个条件判断中,如果第一个判断 True 遇到 and 则判断第二个条件,第二个条件为 False ,判断第三个条件,如果第三个判断为 False 则 输出 False ,遇到 or 直接输出判断 True //如果第一个判断为 False 遇到 and 直接输出判断 False ,遇到 or 判断第二个条件

                    True or ---> True
                    True and >>>
                    False or >>>
                    False and --->False


                ####################

                字符运算== 成员运算符 >>> 返回结果为布尔值

                in # 连续的字符,相当于子序列,in 表示某个字符在该字符串中,反之not in 为不在该字符串
                name = '张三'
                '张三' ---> 字符串
                '张' ---> 字符 

                if '张' in  name:
                    print('ok')
                else:
                    print('Error')
                    
                not in # 连续的字符,相当于子序列,not in 表示某个字符不在该字符串中

                ####################

                布尔值:

                True 真
                var_b = '张' in  name
                print (var_b)

                False 假
                var_2 = '四' in  name
                print(var_2)
                
			